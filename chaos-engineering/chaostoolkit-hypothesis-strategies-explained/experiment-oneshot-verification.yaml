title: "Verify if service can update its container count quickly"
description: |
  This experiment is designed to verify if an AWS ECS service can update
  its containers count and spawn up new instances in the allowed start time.
  This is a good example of how steady state verification needs to run only
  at the end of the experiment. Verifying the state earlier would just result
  in a failed experiment as the container count has not been updated yet.

contributions:
  reliability: "medium"
  scalability: "high"
  security: "none"

configuration:
  cluster_arn: null  # to be determined at runtime
  service_name: null  # to be determined at runtime
  new_desired_count: 10
  allowed_start_time_seconds: 120
  aws_profile_name:
    type: "env"
    key: "AWS_PROFILE"
    default: "default"
  aws_region:
    type: "env"
    key: "AWS_DEFAULT_REGION"
    default: "us-east-1"

steady-state-hypothesis:
  title: "All container replicas should be online"
  probes:
    - type: probe
      name: "desired-tasks-should-be-running"
      tolerance: true
      provider:
        type: python
        module: chaosaws.ecs.probes
        func: are_all_desired_tasks_running
        arguments:
          cluster: "${cluster_arn}"
          service: "${service_name}"

# Introduce chaos, change initial conditions
method:
  - type: action
    name: "update-service-container-count"
    provider:
      type: python
      module: chaosaws.ecs.actions
      func: update_desired_count
      arguments:
        cluster: "${cluster_arn}"
        service: "${service_name}"
        desired_count: ${new_desired_count}

  - type: action
    name: "wait-to-spawn-containers"
    provider:
      type: python
      module: chaosaddons.utils.idle
      func: idle_for
      arguments:
        duration: ${allowed_start_time_seconds}
